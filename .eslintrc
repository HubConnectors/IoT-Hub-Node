{
    //该配置项主要用于指示此.eslintrc文件是Eslint在项目内使用的根级别文件
    "root":true,
    //默认情况下，Eslint使用其内置的 Espree 解析器，该解析器与标准 JavaScript 运行时和版本兼容.而我们需要将ts代码解析为eslint兼容的AST，所以此处我们使用 @typescript-eslint/parser
    "parser":"@typescript-eslint/parser",
    //该配置项告诉eslint我们拓展了哪些指定的配置集
    "extends":[
        //该配置集是 ESLint 内置的“推荐”，它打开一组小的、合理的规则，用于检查众所周知的最佳实践
        "eslint:recommended",
        //该配置集是typescript-eslint的推荐，它与eslint:recommended相似，但它启用了特定于ts的规则
        "plugin:@typescript-eslint/recommended",
        //该配置集禁用 eslint:recommended 配置集中已经由 typeScript 处理的规则，防止eslint和typescript之间的冲突。
        "plugin:@typescript-eslint/eslint-recommended",
        //eslint-config-prettier配置集，这会关闭一些与 Prettier 冲突的 ESLint 规则
        "prettier"
    ],
    //该配置项指示要加载的插件
    // @typescript-eslint 插件使得我们能够在我们的存储库中使用typescript-eslint包定义的规则集
    // prettier该插件将 Prettier 规则转换为 ESLint 规则
    "plugins":["@typescript-eslint","prettier"],
    "rules":{
        //打开eslint-plugin-prettier插件提供的规则，该插件从 ESLint 内运行 Prettier
        "prettier/prettier": "error",
        //关闭对应的这两个 ESLint 核心规则，这两个规则和prettier插件一起使用会出现问题
        "arrow-body-style": "off",
        "prefer-arrow-callback": "off",
        "@typescript-eslint/no-unused-vars": ["off"],
        "@typescript-eslint/no-explicit-any": ["off"]
    }
}